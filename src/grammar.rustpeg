use super::ast::*;

LBRACE          = __ "{"
RBRACE          = __ "}"
LPAREN          = __ "("
RPAREN          = __ ")"
ARROW           = __ "->"
COLON           = __ ":"
COMMA           = __ ","
LET             = __ "let"
EQUALTO         = __ ":="
BREAK           = __ "break"
CONTINUE        = __ "continue"
HEX             = __ "hex"
_X              = __ "0x"
FOR             = __ "for"
SWITCH          = __ "switch"
CASE            = __ "case"
DEFAULT         = __ "default"
ASSEMBLY        = __ "assembly"
FUNCTION        = __ "function"
DQUOTE_BEGIN    = __ "\""
DQUOTE_END      = "\""
SQUOTE_BEGIN    = __ "\'"
SQUOTE_END      = "\'"
COMMENT_LINE    = "//"
COMMENT_BEGIN   = "/*"
COMMENT_END     = "*/"

pub block -> Node<Block>
  = LBRACE statements:(statement*)? __ RBRACE {
      match statements {
        Some(ss) => Block::new(ss),
        None => Block::new(vec![]),
      }
    }

pub statement -> Node<Statement>
  = b:block { Node::new(Statement::Block(b)) }
  / d:function_definition { Node::new(Statement::FunctionDefinition(d)) }
  / o:control_op { Node::new(Statement::ControlOp(o)) }
  / s:switch { Node::new(Statement::Switch(s)) }
  / d:variable_declaration { Node::new(Statement::VariableDeclaration(d)) }
  / a:assignment { Node::new(Statement::Assignment(a)) }
  / f:for_loop { Node::new(Statement::ForLoop(f)) }
  / s:sub_assembly { Node::new(Statement::SubAssembly(s)) }
  / e:expression { Node::new(Statement::Expression(e)) }

pub expression -> Node<Expression>
  = l:literal { Node::new(Expression::Literal(l)) }
  / c:function_call { Node::new(Expression::FunctionCall(c)) }
  / i:identifier { Node::new(Expression::Identifier(i)) }

pub function_definition -> Node<FunctionDefinition>
  = FUNCTION i:identifier LPAREN args:identifier_list_or_empty RPAREN
      ARROW LPAREN returns:identifier_list RPAREN block:block
    { FunctionDefinition::new(i, args, Some(returns), block) }
  / FUNCTION i:identifier LPAREN args:identifier_list_or_empty RPAREN block:block
    { FunctionDefinition::new(i, args, None, block) }

identifier_list_or_empty -> Vec<Node<Identifier>>
  = opt:(identifier_list?)  {
      match opt {
        Some(identifiers) => identifiers,
        None => vec![],
      }
    }

identifier_list -> Vec<Node<Identifier>>
  = i:identifier is:(identifier_list_clause*) {
      let mut identifiers = vec![i];
      identifiers.extend(is);
      identifiers
  }

identifier_list_clause -> Node<Identifier>
  = COMMA i:identifier { i }

pub variable_declaration -> Node<VariableDeclaration>
  = LET is:identifier_or_list EQUALTO e:expression {
      VariableDeclaration::new(is, e)
    }

identifier_or_list -> Vec<Node<Identifier>>
  = LPAREN is:identifier_list RPAREN { is }
  / i:identifier { vec![i] }

pub assignment -> Node<Assignment>
  = is:identifier_or_list EQUALTO e:expression {
    Assignment::new(is, e)
  }

pub switch -> Node<Switch>
  = SWITCH e:expression cs:(case*) d:(default?) { Switch::new(e, cs, d) }

pub case -> Node<Case>
  = CASE e:expression COLON b:block { Case::new(e, b) }

pub default -> Node<Block>
  = DEFAULT COLON b:block { b }

pub for_loop -> Node<ForLoop>
  = FOR init:block condition:expression post:block body:block {
      ForLoop::new(init, condition, post, body)
    }

pub control_op -> Node<ControlOp>
  = BREAK { Node::new(ControlOp::Break()) }
  / CONTINUE { Node::new(ControlOp::Continue()) }

pub sub_assembly -> Node<SubAssembly>
  = ASSEMBLY i:identifier b:block { SubAssembly::new(i, b) }

pub function_call -> Node<FunctionCall>
  = i:identifier LPAREN es:expression_list RPAREN { FunctionCall::new(i, es) }

expression_list -> Vec<Node<Expression>>
  = first:expression rest:(expression_list_clause*) {
      let mut expressions = vec![first];
      expressions.extend(rest);
      expressions
    }
  / { vec![] }

expression_list_clause -> Node<Expression>
  = COMMA e:expression { e }

pub identifier -> Node<Identifier>
  = __ name:$([a-zA-Z_$] [a-zA-Z_0-9]*) { Identifier::new(name) }

pub literal -> Node<Literal>
  = x:hex_number { Node::new(Literal::HexNumber(x)) }
  / n:dec_number { Node::new(Literal::DecNumber(n)) }
  / l:string_literal { Node::new(Literal::StringLiteral(l)) }
  / l:hex_literal { Node::new(Literal::HexLiteral(l)) }

pub string_literal -> Node<StringLiteral>
  = __ string:(double_quoted_string) { StringLiteral::new(string) }

double_quoted_string -> String
  = DQUOTE_BEGIN s:double_quoted_character* DQUOTE_END { s.into_iter().collect() }

double_quoted_character -> char
  = (!('"' / "\r" / "\n" / "\\") / "\\" .) c:$. { c.chars().next().unwrap() }

pub hex_literal -> Node<HexLiteral>
  = HEX b:bytestr { HexLiteral::new(b.as_str()) }

bytestr -> String
  = DQUOTE_BEGIN b:bytes DQUOTE_END { b }
  / SQUOTE_BEGIN b:bytes SQUOTE_END { b }

bytes -> String
  = b:$(([0-9A-Fa-f]{2})*) { b.to_string() }

pub hex_number -> Node<HexNumber>
  = _X uint:$([0-9A-Fa-f]+) { HexNumber::new(uint) }

pub dec_number -> Node<DecNumber>
  = __ uint:$([0-9]+) { DecNumber::new(uint) }

__ = (whitespace / comment)*

whitespace = [ \t\n\r]
comment
  = COMMENT_LINE (!'\n' .)*
  / COMMENT_BEGIN (!COMMENT_END .)* COMMENT_END
